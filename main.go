package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"math"
	"os"
	"strconv"
	"time"

	"github.com/go-pg/pg/v9"
	tb "gopkg.in/tucnak/telebot.v2"
)

type Snail struct {
	Name     string
	Position int
	Speed    int
	Score    int
	Adka     int
	Base     string
}

func (s *Snail) GetString() string {
	var out string
	if s.Position == winPos {
		out = "_________________________üêåü•á"
	} else {
		out = s.Base[:s.Position] + "üêå" + s.Base[s.Position:]

	}
	return out
}

func (s *Snail) Hodik() (bool, bool) {
	randomka := Random(0, 100)

	if randomka < changeSpeedProb {
		s.Adka = Random(1, 10)
	}

	s.Score += s.Adka
	//fmt.Println("–°–∫–æ—Ä—ã "+s.Name+":", gary.Score)
	if s.Score > maxScore {
		s.Position++
		s.Score = 0

		if s.Position == winPos {
			return true, true
		}

		return true, false
	}
	return false, false
}

var (
	maxScore        int
	winPos          int
	changeSpeedProb int

	appWallet string

	messageRace string
)

var B *tb.Bot
var db *pg.DB
var (
	ReplyMain = &tb.SendOptions{
		ParseMode: tb.ModeHTML,
		ReplyMarkup: &tb.ReplyMarkup{
			ResizeReplyKeyboard: true,
			ReplyKeyboard: [][]tb.ReplyButton{
				{
					tb.ReplyButton{Text: "üèÅ –ì–æ–Ω–∫–∞"},
				},
				{
					tb.ReplyButton{Text: "üêå –£–ª–∏—Ç–∫–∏"},
					tb.ReplyButton{Text: "üí∞ –ö–æ—à–µ–ª—ë–∫"},
					tb.ReplyButton{Text: "‚ùì –ü–æ–º–æ—â—å"},
				},
			},
		},
	}

	ReplyOut = &tb.SendOptions{
		ParseMode: tb.ModeHTML,
		ReplyMarkup: &tb.ReplyMarkup{
			ResizeReplyKeyboard: true,
			ReplyKeyboard: [][]tb.ReplyButton{
				{
					tb.ReplyButton{Text: "‚ùå –û—Ç–º–µ–Ω–∞"},
					tb.ReplyButton{Text: "üí∞ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—ë"},
				},
			},
		},
	}

	InlineBet = &tb.SendOptions{
		ParseMode: tb.ModeHTML,
		ReplyMarkup: &tb.ReplyMarkup{
			InlineKeyboard: [][]tb.InlineButton{
				{
					tb.InlineButton{Text: "üç≠ –ù–∞ –ì–µ—Ä–∏(üêå ‚Ññ1)", Unique: "GaryBet"},
				},
				{
					tb.InlineButton{Text: "üçì –ù–∞ –ë–æ–Ω—é(üêå ‚Ññ2)", Unique: "BonyaBet"},
				},
				{
					tb.InlineButton{Text: "üçè –ù–∞ –í–∞—Å—é(üêå ‚Ññ3)", Unique: "VasyaBet"},
				},
			},
		},
	}

	InlineSnails = &tb.SendOptions{
		ParseMode: tb.ModeHTML,
		ReplyMarkup: &tb.ReplyMarkup{
			InlineKeyboard: [][]tb.InlineButton{
				{
					tb.InlineButton{Text: "üêå –ì–µ—Ä–∏", Unique: "Gary"},
					tb.InlineButton{Text: "üêå –ë–æ–Ω—è", Unique: "Bonya"},
					tb.InlineButton{Text: "üêå –í–∞—Å—è", Unique: "Vasya"},
				},
			},
		},
	}

	InlineMoney = &tb.SendOptions{
		ParseMode: tb.ModeHTML,
		ReplyMarkup: &tb.ReplyMarkup{
			InlineKeyboard: [][]tb.InlineButton{
				{
					tb.InlineButton{Text: "üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å", Unique: "MoneyIn"},
					tb.InlineButton{Text: "üì§ –í—ã–≤–µ—Å—Ç–∏", Unique: "MoneyOut"},
				},
			},
		},
	}
)

func main() {

	var (
		port      = os.Getenv("PORT")
		publicURL = os.Getenv("PUBLIC_URL")
		token     = os.Getenv("TOKEN")
		err       error
	)

	maxScore = GetInt("MAX_SCORE")
	winPos = GetInt("WIN_POS")
	changeSpeedProb = GetInt("CHANGE_SPEED_PROB")

	appWallet = os.Getenv("APP_WALLET")

	messageRace = GetText("race")

	poller := &tb.Webhook{
		Listen:   ":" + port,
		Endpoint: &tb.WebhookEndpoint{PublicURL: publicURL},
	}

	B, err = tb.NewBot(tb.Settings{
		Token:  token,
		Poller: poller,
	})

	if err != nil {
		log.Fatalln(err)
	}

	B.Handle("/start", hStart)
	B.Handle(tb.OnText, hText)
	B.Handle("\fGary", func(c *tb.Callback) { hSnails(c, "gary") })
	B.Handle("\fBonya", func(c *tb.Callback) { hSnails(c, "bonya") })
	B.Handle("\fVasya", func(c *tb.Callback) { hSnails(c, "vasya") })

	B.Handle("\fGaryBet", func(c *tb.Callback) { hBet(c, "gary") })
	B.Handle("\fBonyaBet", func(c *tb.Callback) { hBet(c, "bonya") })
	B.Handle("\fVasyaBet", func(c *tb.Callback) { hBet(c, "vasya") })

	B.Handle("\fMoneyIn", hMoneyIn)
	B.Handle("\fMoneyOut", hMoneyOut)

	ConnectDataBase()
	defer db.Close()

	B.Start()
}

func hMoneyIn(c *tb.Callback) {
	B.Respond(c)
	address, _ := GetWallet(c.Sender.ID)

	B.Send(c.Sender, "üí∞ –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –æ—Ç–ø—Ä–∞–≤—å BIP –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å:")
	B.Send(c.Sender, "<code>"+address+"</code>", ReplyMain)
}
func hMoneyOut(c *tb.Callback) {
	B.Respond(c)

	address, _ := GetWallet(c.Sender.ID)
	if GetBalance(address) < 40.01 {
		B.Send(c.Sender, `ü§Ø –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞!
<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞:</b> 40 BIP`)
	} else {

		SetBotState(c.Sender.ID, "MinterAddressSend")
		B.Send(c.Sender, "üí∞ –ö—É–¥–∞ –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–Ω–µ—Ç–∫–∏? <b>–ü—Ä–∏—à–ª–∏ —Å–≤–æ–π –∞–¥—Ä–µ—Å –≤ —Å–µ—Ç–∏ Minter</b>", &tb.SendOptions{ParseMode: tb.ModeHTML, ReplyMarkup: &tb.ReplyMarkup{ReplyKeyboardRemove: true}})
	}
}

func hStart(m *tb.Message) {
	if !m.Private() {
		return
	}
	p, isNewPlayer := NewDefaultPlayer(m.Sender.ID)

	if isNewPlayer {
		fmt.Printf("–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫: @%s[%d]\n", m.Sender.Username, p.ID)

		message := GetText("start")
		B.Send(m.Sender, message, ReplyMain)
	} else {
		B.Send(m.Sender, "ü§Ø –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç—ã —É–∂–µ –∏–≥—Ä–∞–µ—à—å!", ReplyMain)
	}
}

func hText(m *tb.Message) {
	if !m.Private() {
		return
	}

	botState := GetBotState(m.Sender.ID)

	if botState == "CoinNumSend" {
		if m.Text == "üí∞ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—ë" {
			adress, prKey := GetWallet(m.Sender.ID)
			outAdress := GetOutAddress(m.Sender.ID)
			minGasPrice, _ := minterClient.MinGasPrice()
			minGasPriceF, _ := strconv.ParseFloat(minGasPrice, 64)
			num := GetBalance(adress) - minGasPriceF*0.01
			_, err := SendCoin(num, adress, outAdress, prKey)

			if err != nil {
				B.Send(m.Sender, "ü§Ø –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.", ReplyMain)
			} else {
				B.Send(m.Sender, "üéâ –ú–æ–Ω–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", ReplyMain)
			}
		} else if m.Text == "‚ùå –û—Ç–º–µ–Ω–∞" {
			B.Send(m.Sender, "‚ùå –í—ã–≤–æ–¥ –ø—Ä–µ—Ä–≤–∞–Ω", ReplyMain)
		} else {
			flyt, err := strconv.ParseFloat(m.Text, 64)
			if err != nil || flyt < 40 {
				B.Send(m.Sender, "ü§Ø –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫... –ù—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å–ª–æ –º–æ–Ω–µ—Ç", ReplyMain)
			} else {
				adress, prKey := GetWallet(m.Sender.ID)
				outAdress := GetOutAddress(m.Sender.ID)
				_, err := SendCoin(flyt, adress, outAdress, prKey)
				if err != nil {
					B.Send(m.Sender, "ü§Ø –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", ReplyMain)
				} else {
					B.Send(m.Sender, "üéâ –ú–æ–Ω–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", ReplyMain)
				}
			}
		}
		SetBotState(m.Sender.ID, "default")
	} else if botState == "MinterAddressSend" {

		_, err := minterClient.Address(m.Text)

		if err != nil {
			SetBotState(m.Sender.ID, "default")
			B.Send(m.Sender, "ü§Ø –° —ç—Ç–∏–º –∞–¥—Ä–µ—Å–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫. –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑", ReplyMain)
		} else {
			address, _ := GetWallet(m.Sender.ID)
			bipBalance := GetBalance(address)

			minterClient.MaxGas()
			minGasPrice, _ := minterClient.MinGasPrice()
			minGasPriceF, _ := strconv.ParseFloat(minGasPrice, 64)

			max := bipBalance - minGasPriceF*0.01

			SetOutAddress(m.Sender.ID, m.Text)
			SetBotState(m.Sender.ID, "CoinNumSend")
			message := `üí∞ –°–∫–æ–ª—å–∫–æ —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–≤–µ—Å—Ç–∏? <b>–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç BIP</b>

<b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> %.2f BIP
<b>–ö–æ–º–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:</b> %.2f BIP
<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> 40 BIP
<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞:</b> %.2f BIP`

			B.Send(m.Sender, fmt.Sprintf(message, bipBalance, minGasPriceF*0.01, max), ReplyOut)
		}

	} else {

		if m.Text == "üèÅ –ì–æ–Ω–∫–∞" {
			defPos := 0
			gary := Snail{Position: defPos, Base: "_________________________üç≠"}
			bonya := Snail{Position: defPos, Base: "_________________________üçì"}
			vasya := Snail{Position: defPos, Base: "_________________________üçè"}

			address, _ := GetWallet(m.Sender.ID)
			bipBalance := GetBalance(address)
			minGasPrice, _ := minterClient.MinGasPrice()
			minGasPriceF, _ := strconv.ParseFloat(minGasPrice, 64)

			message := fmt.Sprintf(GetText("race"), "üí∞ –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–≤–∫–∏...", fmt.Sprintf(`
–ë–∞–ª–∞–Ω—Å: <b>%.2f BIP</b>
–†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ - <b>50 BIP</b> + –ö–æ–º–∏—Å—Å–∏—è - %.2f
<b>–í—ã–∏–≥—Ä—ã—à - 100 BIP</b>`, bipBalance, minGasPriceF*0.01),
				gary.GetString(),
				bonya.GetString(),
				vasya.GetString(),
			)

			B.Send(m.Sender, message, InlineBet)
		} else if m.Text == "üêå –£–ª–∏—Ç–∫–∏" {
			message := fmt.Sprintf(GetText("gary"))

			B.Send(m.Sender, message, InlineSnails)
		} else if m.Text == "üí∞ –ö–æ—à–µ–ª—ë–∫" {
			winC, _ := GetRate(m.Sender.ID)

			address, _ := GetWallet(m.Sender.ID)
			bipBalance := GetBalance(address)
			usdBalance := GetBipPrice() * bipBalance

			message := fmt.Sprintf(GetText("winrate"), math.Round(bipBalance*100)/100, math.Round(usdBalance*100)/100, winC)

			B.Send(m.Sender, message, InlineMoney)
		} else if m.Text == "‚ùì –ü–æ–º–æ—â—å" {
			message := GetText("help")
			B.Send(m.Sender, message, &tb.SendOptions{DisableWebPagePreview: true, ParseMode: tb.ModeHTML})
		} else {
			B.Send(m.Sender, "ü§Ø –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é!", ReplyMain)
		}
	}
}

//GetText –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
func GetText(fileName string) string {
	content, err := ioutil.ReadFile("messages/" + fileName + ".html")
	if err != nil {
		fmt.Println("–ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞", fileName, err)
	}

	return string(content)
}

func hBet(c *tb.Callback, betSnailName string) {
	B.Respond(c)
	var betka string

	address, key := GetWallet(c.Sender.ID)
	result, err := SendCoin(50, address, appWallet, key)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", err)
		B.Send(c.Sender, "ü§Ø –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤? –ó–∞–≥–ª—è–Ω–∏ –≤ —Ä–∞–∑–¥–µ–ª <b>üí∞ –ö–æ—à–µ–ª—ë–∫</b>", tb.ModeHTML)
		return
	}

	fmt.Println(result)

	snails := [3]Snail{
		{Adka: Random(1, 10), Base: "_________________________üç≠", Name: "gary"},
		{Adka: Random(1, 10), Base: "_________________________üçì", Name: "bonya"},
		{Adka: Random(1, 10), Base: "_________________________üçè", Name: "vasya"},
	}

	if betSnailName == snails[0].Name {
		betka = "–°—Ç–∞–≤–∫–∞: üêå <b>–ì–µ—Ä–∏</b> üç≠"
	}
	if betSnailName == snails[1].Name {
		betka = "–°—Ç–∞–≤–∫–∞: üêå <b>–ë–æ–Ω—è</b> üçì"
	}
	if betSnailName == snails[2].Name {
		betka = "–°—Ç–∞–≤–∫–∞: üêå <b>–í–∞—Å—è</b> üçè"
	}

	win := "nil"
	var winnersArray []string
	for win == "nil" {

		isUpdateMessage := false
		for i := 0; i < 3; i++ {
			isUpdate, winner := snails[i].Hodik()
			if isUpdate {
				isUpdateMessage = true
			}
			if winner {
				winnersArray = append(winnersArray, snails[i].Name)
			}
		}

		if len(winnersArray) > 0 {
			winInd := Random(0, len(winnersArray))

			for i, snailName := range winnersArray {
				if i == winInd {
					win = snailName
				} else {
					snails[i].Position--
				}
			}
		}

		if isUpdateMessage {
			title := "–ì–æ–Ω–∫–∞!"

			message := fmt.Sprintf(messageRace, title,
				betka,
				snails[0].GetString(),
				snails[1].GetString(),
				snails[2].GetString(),
			)
			B.Edit(c.Message, message, tb.ModeHTML)
		}
		time.Sleep(time.Millisecond * 10)
	}
	if win == betSnailName {
		address, _ := GetWallet(c.Sender.ID)
		result, err := SendCoin(100, appWallet, address, GetPrivateKeyFromMnemonic(os.Getenv("MNEMONIC")))
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", err)
			B.Send(c.Sender, "ü§Ø –≠–¢–û–ì–û –ù–ï –î–û–õ–ñ–ù–û –ë–´–õ–û –°–õ–£–ß–ò–¢–°–Ø! –í–´–ò–ì–†–´–®–¨ –ù–ï –û–¢–ü–†–ê–í–ò–õ–°–Ø!!!", ReplyMain)
		}
		fmt.Println(result)
		title := "–¢–≤–æ—è —É–ª–∏—Ç–∫–∞ –ø–æ–±–µ–¥–∏–ª–∞! –í—ã–∏–≥—Ä—ã—à—å - 100 BIP"

		message := fmt.Sprintf(messageRace, title,
			betka,
			snails[0].GetString(),
			snails[1].GetString(),
			snails[2].GetString(),
		)
		B.Edit(c.Message, message, tb.ModeHTML)
		B.Send(c.Sender, "–¢–≤–æ—è —Å—Ç–∞–≤–∫–∞ –∑–∞—à–ª–∞! –ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏!", tb.ModeHTML)

		doWin(c.Sender.ID)
	} else {
		doLose(c.Sender.ID)

		title := "–≠—Ö—Ö, –Ω–µ—É–¥–∞—á–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"

		message := fmt.Sprintf(messageRace, title,
			betka,
			snails[0].GetString(),
			snails[1].GetString(),
			snails[2].GetString(),
		)
		B.Edit(c.Message, message, tb.ModeHTML)
		B.Send(c.Sender, "–¢—ã –º–æ–∂–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ üêå –£–ª–∏—Ç–æ–∫ –≤ –æ—Å–æ–±–æ–º —Ä–∞–∑–¥–µ–ª–µ", tb.ModeHTML)
	}
}

func hSnails(c *tb.Callback, snailName string) {
	B.Respond(c)
	B.Edit(c.Message, GetText(snailName), InlineSnails)
}

type Player struct {
	ID         int
	Address    string
	PrivateKey string
	WinCount   int `pg:"win_count,use_zero,notnull"`
	LoseCount  int `pg:"lose_count,use_zero,notnull"`
	BotState   string
	OutAddress string
}

func NewDefaultPlayer(id int) (Player, bool) {
	p := &Player{}
	p.ID = id
	p.Address, p.PrivateKey = CreateWallet()
	p.BotState = "default"

	res, err := db.Model(p).OnConflict("DO NOTHING").Insert()
	if err != nil {
		panic(err)
	}

	if res.RowsAffected() > 0 {
		return *p, true
	}
	return *p, false
}

func doWin(id int) {
	p := &Player{}
	p.ID = id
	p.WinCount, _ = GetRate(id)
	p.WinCount++

	db.Model(p).Set("win_count = ?", p.WinCount).Where("id = ?", p.ID).Update()
}
func doLose(id int) {
	p := &Player{}
	p.ID = id
	_, p.LoseCount = GetRate(id)
	p.LoseCount++

	db.Model(p).Set("lose_count = ?", p.LoseCount).Where("id = ?", p.ID).Update()
}

func GetRate(id int) (int, int) {
	p := &Player{}
	p.ID = id
	err := db.Select(p)
	if err != nil {
		fmt.Println(err)
	}

	return p.WinCount, p.LoseCount
}

func GetWallet(id int) (string, string) {
	p := &Player{}
	p.ID = id
	err := db.Select(p)
	if err != nil {
		fmt.Println(err)
	}

	return p.Address, p.PrivateKey
}

func GetOutAddress(id int) string {
	p := &Player{}
	p.ID = id
	err := db.Select(p)
	if err != nil {
		fmt.Println(err)
	}

	return p.OutAddress
}

func SetOutAddress(id int, outA string) {
	p := &Player{}
	p.ID = id
	p.OutAddress = outA

	db.Model(p).Set("out_address = ?", p.OutAddress).Where("id = ?", p.ID).Update()
}

func GetBotState(id int) string {
	p := &Player{}
	p.ID = id
	err := db.Select(p)
	if err != nil {
		fmt.Println(err)
	}

	return p.BotState
}

func SetBotState(id int, state string) {
	p := &Player{}
	p.ID = id
	p.BotState = state

	db.Model(p).Set("bot_state = ?", p.BotState).Where("id = ?", p.ID).Update()
}
